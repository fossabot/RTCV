<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="StyleCop Rules" ToolsVersion="10.0">
  <Localization ResourceAssembly="Microsoft.VisualStudio.CodeAnalysis.RuleSets.Strings.dll" ResourceBaseName="Microsoft.VisualStudio.CodeAnalysis.RuleSets.Strings.Localized">
    <Name Resource="MinimumRecommendedRules_Name" />
    <Description Resource="MinimumRecommendedRules_Description" />
  </Localization>
  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
    <Rule Id="SA1600" Action="None" /> <!-- Elements should be documented -->
    <Rule Id="SA1633" Action="None" /> <!-- File should have header -->
    <Rule Id="SA0001" Action="None" /> <!-- XML comments -->
    <Rule Id="SA1101" Action="None" /> <!-- Prefix local calls with this -->
    <Rule Id="SA1407" Action="None" /> <!-- Arithmetic expressions should declare precedence -->
    <Rule Id="SA1116" Action="None" /> <!-- Split parameters should start on line after declaration -->
    <Rule Id="SA1309" Action="None" /> <!-- Field names should not begin with underscore -->
    <Rule Id="SA1402" Action="None" /> <!-- File may only contain a single type -->
    <Rule Id="SA1204" Action="None" /> <!-- Static elements should appear before instance elements -->
    <Rule Id="SA1604" Action="None" /> <!-- Element documentation should have summary -->
    <Rule Id="SA1516" Action="None" /> <!-- Elements should be separated by blank line -->
    <Rule Id="SA1649" Action="None" /> <!-- File name should match first type name -->
    <Rule Id="SA1128" Action="None" /> <!-- Put constructor initializers on their own line -->
    <Rule Id="SA1122" Action="None" /> <!-- Use string.Empty for empty strings -->
    <Rule Id="SA1413" Action="None" /> <!-- Use trailing comma in multi-line initializers -->
    <Rule Id="SA1117" Action="None" /> <!-- Parameters should be on same line or separate lines -->
    <Rule Id="SA1602" Action="None" /> <!-- Enumeration items should be documented -->
    <Rule Id="SA1108" Action="None" /> <!-- Block statements should not contain embedded comments -->
    <Rule Id="SA1601" Action="None" /> <!-- Partial elements should be documented -->
    <Rule Id="SA1401" Action="None" /> <!-- Fields should be private -->
    <Rule Id="SA1404" Action="None" /> <!-- Code analysis suppression should have justification -->
    <Rule Id="SA1515" Action="None" /> <!-- Single-line comment should be preceded by blank line -->
    <Rule Id="SA1512" Action="None" /> <!-- Single-line comments should not be followed by blank line -->
    <Rule Id="SA1118" Action="None" /> <!-- Parameter should not span multiple lines -->
    <Rule Id="SA1127" Action="None" /> <!-- Generic type constraints should be on their own line -->
    <Rule Id="SA1132" Action="None" /> <!-- Do not combine fields -->
    <Rule Id="SA1501" Action="None" /> <!-- Statement should not be on a single line -->
    <Rule Id="SA1502" Action="None" /> <!-- Element should not be on a single line -->
    <Rule Id="SA1203" Action="None" /> <!-- Constants should appear before fields -->
    <Rule Id="SA1214" Action="None" /> <!-- Readonly fields should appear before non-readonly fields -->
    <Rule Id="SA1133" Action="None" /> <!-- Do not combine attributes -->
    <Rule Id="SA1202" Action="None" /> <!-- Elements should be ordered by access -->
    <Rule Id="SA1201" Action="None" /> <!-- Elements should appear in the correct order -->
    <Rule Id="SA1005" Action="None" /> <!-- Single line comment should begin with a space -->
    <Rule Id="SA1513" Action="None" /> <!-- Closing brace should be followed by blank line -->
    <Rule Id="SA1507" Action="None" /> <!-- Code should not contain multiple blank lines in a row -->
    <Rule Id="SA1009" Action="None" /> <!-- Closing parenthesis should not be preceded by a space -->
    <Rule Id="SA1313" Action="None" /> <!-- Parameter should begin with lower-case letter -->
    <Rule Id="SA1124" Action="None" /> <!-- Do not use regions -->
    <Rule Id="SA1503" Action="None" /> <!-- Braces should not be omitted -->
    <Rule Id="SA1119" Action="None" /> <!-- Statement should not use unnecessary parenthesis -->
    <Rule Id="SA1136" Action="None" /> <!-- Enum values should be on separate lines -->
    <Rule Id="SA1300" Action="None" /> <!-- Element should begin with an uppercase letter -->
    <Rule Id="SA1111" Action="None" /> <!-- Closing parenthesis should be on line of last parameter -->
    <Rule Id="SA1210" Action="None" /> <!-- Using directives should be ordered alphabetically by the namespaces -->
    <Rule Id="SA1400" Action="None" /> <!-- Element should declare an access modifier -->
    <Rule Id="SA1131" Action="None" /> <!-- Constant values should appear on the right-hand side of comparisons -->
    <Rule Id="SA1520" Action="None" /> <!-- Use braces consistently -->
    <Rule Id="SA1519" Action="None" /> <!-- Braces should not be omitted from multi-line child statement -->
    <Rule Id="SA1025" Action="None" /> <!-- Code should not contain multiple whitespace characters in a row -->
    <Rule Id="SA1001" Action="None" /> <!-- Commas should be followed by whitespace -->
    <Rule Id="SA1306" Action="None" /> <!-- Field should begin with lower-case letter -->
    <Rule Id="SA1614" Action="None" /> <!-- The documentation text within the param tag must not be empty -->
    <Rule Id="SA1139" Action="None" /> <!-- Use literal suffix notation instead of casting -->
    <Rule Id="SA1120" Action="None" /> <!-- Comments should contain text -->
    <Rule Id="SA1307" Action="None" /> <!-- Field should begin with upper-case letter -->
    <Rule Id="SA1113" Action="None" /> <!-- Comma should be on the same line as previous parameter -->
    <Rule Id="SA1107" Action="None" /> <!-- Code should not contain multiple statements on one line -->
    <Rule Id="SA1312" Action="None" /> <!-- Variable 'Handle' should begin with lower-case letter -->
    <Rule Id="SA1121" Action="None" /> <!-- Use built-in type alias -->
    <Rule Id="SA1405" Action="None" /> <!-- Debug.Assert should provide message text -->
    <Rule Id="SA1100" Action="None" /> <!-- Do not prefix calls with base unless local implementation exists -->
    <Rule Id="SA1310" Action="None" /> <!-- Field should not contain an underscore -->
    <Rule Id="SA1303" Action="None" /> <!-- Const field names should begin with upper-case letter -->
    <Rule Id="SA1500" Action="None" /> <!-- Braces for multi-line statements should not share line -->
    <Rule Id="SA1314" Action="None" /> <!-- Type parameter names should begin with T -->
    <Rule Id="SA1212" Action="None" /> <!-- A get accessor appears after a set accessor within a property or indexer -->
    <Rule Id="SA1311" Action="None" /> <!-- Static readonly fields should begin with upper-case letter -->
    <Rule Id="SA1408" Action="None" /> <!-- Conditional expressions should declare precedence -->
    <Rule Id="SA1129" Action="None" /> <!-- Do not use default value type constructor -->
    <Rule Id="SA1003" Action="None" /> <!-- Operator whitespace -->
    <Rule Id="SA1411" Action="None" /> <!-- Attribute constructor should not use unnecessary parenthesis -->
    <Rule Id="SA1134" Action="None" /> <!-- Each attribute should be placed on its own line of code -->
    <Rule Id="SA1504" Action="None" /> <!-- All accessors should be single-line or multi-line -->
    <Rule Id="SA1130" Action="None" /> <!-- Use lambda syntax -->
  </Rules>
  <Rules AnalyzerId="Microsoft.CodeAnalysis.FxCopAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.FxCopAnalyzers">
    <Rule Id="CS0649" Action="None" /> <!-- Field never assigned to -->
    <Rule Id="CA2000" Action="None" /> <!-- Call on object before all references to it are out of scope -->
    <Rule Id="CA2002" Action="None" /> <!-- Do not lock on objects with weak identity -->
    <Rule Id="CA2007" Action="None" /> <!-- Call ConfigureAwait on the awaited task -->
    <Rule Id="CA2008" Action="None" /> <!-- No tasks without a TaskScheduler -->
    <Rule Id="CA1001" Action="None" /> <!-- Class owns disposable fields but is not disposable -->
    <Rule Id="CA1028" Action="None" /> <!-- If possible, make the underlying type of FileType System.Int32 instead of uint -->
    <Rule Id="CA1032" Action="None" /> <!-- Add constructor to class -->
    <Rule Id="CA1040" Action="None" /> <!-- Avoid empty interfaces -->
    <Rule Id="CA1060" Action="None" /> <!-- Move pinvokes to native methods class -->
    <Rule Id="CA1065" Action="None" /> <!-- Method creates exception -->
    <Rule Id="CA1303" Action="None" /> <!-- Passing literal string as parameter -->
    <Rule Id="CA1822" Action="None" /> <!-- Member can be marked as static -->
    <Rule Id="CA2101" Action="None" /> <!--  Specify marshaling for P/Invoke string arguments -->
    <Rule Id="CA2200" Action="None" /> <!-- Re-throwing caught exception changes stack information -->
    <Rule Id="CA2208" Action="None" /> <!-- Method passes parameter as the message argument -->
    <Rule Id="CA2211" Action="None" /> <!-- Non-constant fields should not be visible -->
    <Rule Id="CA2213" Action="None" /> <!-- Change Dispore method to call Close or Dispose -->
    <Rule Id="CA2227" Action="None" /> <!-- Change to be read-only by removing the property setter -->
    <Rule Id="CA2234" Action="None" /> <!-- Call a different method -->
    <Rule Id="CA2237" Action="None" /> <!-- Add [Serializable] to class -->
    <Rule Id="CA1724" Action="None" /> <!-- Naming conflict -->
    <Rule Id="CA1051" Action="None" /> <!-- Do not declare visible instance fields -->
    <Rule Id="CA1304" Action="None" /> <!-- string.ToUpper behavior could vary based on the current user's locale settings -->
    <Rule Id="CA1305" Action="None" /> <!-- String parsing behavior could vary based on the current user's locale settings -->
    <Rule Id="CA1307" Action="None" /> <!-- string.EndsWith behavior could vary based on the current user's locale settings -->
    <Rule Id="CA1034" Action="None" /> <!-- Do not nest type -->
    <Rule Id="CA1052" Action="None" /> <!--Type is a static holder type but is neither static nor NotInheritable -->
    <Rule Id="CA1401" Action="None" />
    <Rule Id="CA1062" Action="None" /> <!-- Validate parameters for externally visible methods -->
    <Rule Id="CA1063" Action="None" />
    <Rule Id="CA1066" Action="None" /> <!-- Implement IEquatable when overriding Object.Equals -->
    <Rule Id="CA1810" Action="None" /> <!-- Remove the explicit static constructor -->
    <Rule Id="CA1016" Action="None" /> <!-- Mark assemblies with assembly version -->
    <Rule Id="CA1507" Action="None" /> <!-- Use nameof in place of string literal -->
    <Rule Id="CA1707" Action="None" /> <!-- Remove underscore for member name -->
    <Rule Id="CA1712" Action="None" /> <!-- Do not prefix enum values with the name of the enum type 'FileType' -->
    <Rule Id="CA1714" Action="None" /> <!-- Flags enums should have plural names -->
    <Rule Id="CA1715" Action="None" /> <!-- Prefix generic type parameter name with 'T' -->
    <Rule Id="CA1717" Action="None" /> <!-- Only FlagsAttribute enums should have plural names -->
    <Rule Id="CA1801" Action="None" /> <!-- Parameter list of method is never used. Remove the parameter or use it in the method body -->
    <Rule Id="CA1802" Action="None" /> <!-- readonly field should be const -->
    <Rule Id="CA1806" Action="None" /> <!-- Using method without reference to error -->
    <Rule Id="CA1812" Action="None" /> <!-- internal class never instatiated -->
    <Rule Id="CA1814" Action="None" /> <!-- .ctor uses a multidimensional array. Replace it with a jagged array if possible. -->
    <Rule Id="CA1815" Action="None" /> <!-- KeyEvent should override method -->
    <Rule Id="CA1816" Action="None" />
    <Rule Id="CA1819" Action="None" /> <!-- Properties should not return arrays -->
    <Rule Id="CA1820" Action="None" /> <!-- Test for empty strings not using Equality check -->
    <Rule Id="CA1823" Action="None" /> <!-- Unused field -->
    <Rule Id="CA1824" Action="None" /> <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
    <Rule Id="CA1825" Action="None" /> <!-- Avoid unnecessary zero-length array allocations -->
    <Rule Id="CA1827" Action="None" /> <!-- Count() is used where Any() could be used instead to improve performance -->
    <Rule Id="CA1829" Action="None" /> <!-- Use the "Count" property instead of Enumerable.Count() -->
    <Rule Id="CA1716" Action="None" /> <!-- Rename virtual/interface member so it no longer conflicts with reserved language -->
    <Rule Id="CA1720" Action="None" /> <!-- Identifier contains type name -->
    <Rule Id="CA1031" Action="None" /> <!-- Catch more specific exception type -->
    <Rule Id="CA5369" Action="None" /> <!-- Overload is potentially unsafe -->
    <Rule Id="CA3075" Action="None" /> <!-- Unsafe overload of 'Deserialize' method -->
    <Rule Id="CA5351" Action="None" /> <!-- Don't use MD5 -->
  </Rules>
</RuleSet>
